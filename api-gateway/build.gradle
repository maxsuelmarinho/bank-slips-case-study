buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:1.2")
        classpath("net.researchgate:gradle-release:2.6.0")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.researchgate.release'
apply plugin: "docker"

group = 'com.marinho.bankslips'

sourceCompatibility = 1.8
targetCompatibility = 1.8

bootJar {
    baseName = 'api-gateway'
}

repositories {
    mavenCentral()
    jcenter()
}

ext {
    springCloudVersion = 'Finchley.SR1'
}

dependencies {
    compile('org.springframework.cloud:spring-cloud-starter-netflix-zuul')
    compile("org.springframework:spring-web")
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    compile("org.springframework.cloud:spring-cloud-starter-sleuth")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

release {
    failOnCommitNeeded = true
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    revertOnFail = true

    scmAdapters = [net.researchgate.release.GitAdapter]

    git {
        requireBranch = "master"
        pushToRemote = "origin"
    }
}

task dockerImage(type: Docker, dependsOn: build) {
    def buildNumber = System.getenv('BUILD_NUMBER')

    push = Boolean.getBoolean('docker.push')

    tagVersion = buildNumber ? "${project.version.replaceAll('-SNAPSHOT', '')}.${buildNumber}" : "${project.version.replaceAll('-SNAPSHOT', '')}"
    registry = 'maxsuelmarinho'
    applicationName = 'api-gateway'

    dockerfile = file('src/main/docker/Dockerfile')

    doFirst {
        copy {
            from bootJar
            into stageDir
        }
        copy {
            from file('src/main/docker/docker-entrypoint.sh')
            into stageDir
        }
    }
}
